// <auto-generated />
using System;
using ExamCenterFinder.Api.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExamCenterFinder.Api.Migrations
{
    [DbContext(typeof(ExamCenterFinderDbContext))]
    [Migration("20231220043534_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExamCenterFinder.Api.Domain.ExamCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCodeCenterPointId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZipCodeCenterPointId");

                    b.ToTable("ExamCenters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "City 1",
                            Name = "ABC Testing Center",
                            State = "State 1",
                            StreetAddress = "123 Main St, Minneapolis, MN 12345",
                            ZipCodeCenterPointId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "City 2",
                            Name = "DEF Testing Center",
                            State = "State 2",
                            StreetAddress = "456 Side St, Minneapolis, MN 54321",
                            ZipCodeCenterPointId = 2
                        },
                        new
                        {
                            Id = 3,
                            City = "City 3",
                            Name = "GHI Testing Center",
                            State = "State 3",
                            StreetAddress = "789 Cross St, Minneapolis, MN 45123",
                            ZipCodeCenterPointId = 3
                        });
                });

            modelBuilder.Entity("ExamCenterFinder.Api.Domain.ExamSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("ExamCenterId")
                        .HasColumnType("int");

                    b.Property<int>("ReservedSeats")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamCenterId");

                    b.ToTable("ExamSlots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = 2,
                            ExamCenterId = 1,
                            ReservedSeats = 5,
                            StartTime = new DateTime(2023, 5, 1, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalSeats = 115
                        },
                        new
                        {
                            Id = 2,
                            Duration = 2,
                            ExamCenterId = 2,
                            ReservedSeats = 10,
                            StartTime = new DateTime(2023, 5, 2, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            TotalSeats = 115
                        },
                        new
                        {
                            Id = 3,
                            Duration = 2,
                            ExamCenterId = 3,
                            ReservedSeats = 1,
                            StartTime = new DateTime(2023, 5, 1, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            TotalSeats = 115
                        });
                });

            modelBuilder.Entity("ExamCenterFinder.Api.Domain.ZipCodeCenterPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ZipCodeCenterPoints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Latitude = 45.227385700066378,
                            Longitude = -93.996024095202102,
                            ZipCode = "11111"
                        },
                        new
                        {
                            Id = 2,
                            Latitude = 45.561894447158792,
                            Longitude = -93.226935395477625,
                            ZipCode = "22222"
                        },
                        new
                        {
                            Id = 3,
                            Latitude = 44.84908604562181,
                            Longitude = -92.239981994721518,
                            ZipCode = "33333"
                        });
                });

            modelBuilder.Entity("ExamCenterFinder.Api.Domain.ExamCenter", b =>
                {
                    b.HasOne("ExamCenterFinder.Api.Domain.ZipCodeCenterPoint", "ZipCodeCenterPoint")
                        .WithMany()
                        .HasForeignKey("ZipCodeCenterPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ZipCodeCenterPoint");
                });

            modelBuilder.Entity("ExamCenterFinder.Api.Domain.ExamSlot", b =>
                {
                    b.HasOne("ExamCenterFinder.Api.Domain.ExamCenter", "ExamCenter")
                        .WithMany("ExamSlots")
                        .HasForeignKey("ExamCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamCenter");
                });

            modelBuilder.Entity("ExamCenterFinder.Api.Domain.ExamCenter", b =>
                {
                    b.Navigation("ExamSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
